import { WebGLStrokeMeshGenerator } from "../../packages/webgl/src/WebGLStrokeMeshGenerator";

describe("WebGLStrokeMeshGenerator.js test", () =>
{
    it("generate CapsStyle.NONE", () =>
    {
        const mesh = WebGLStrokeMeshGenerator.generate([
            [
                100, 100, false,
                200, 200, false
            ]
        ], "none", "bevel");

        const actualVertexBufferData = new Float32Array([
            100, 100, 200, 200, 1, 1, 1,
            100, 100, 200, 200, -1, -1, 1,
            200, 200, 100, 100, -1, -1, 1,
            200, 200, 100, 100, 1, 1, 1
        ]);

        const actualIndexBufferData = new Int16Array([
            0, 1, 3,
            3, 2, 0
        ]);

        expect(mesh.vertexBufferData).toEqual(actualVertexBufferData);
        expect(mesh.indexBufferData).toEqual(actualIndexBufferData);
    });

    it("generate CapsStyle.ROUND", () =>
    {
        const mesh = WebGLStrokeMeshGenerator.generate([
            [
                100, 100, false,
                200, 200, false
            ]
        ], "round", "bevel");

        const actualVertexBufferData = new Float32Array([
            100, 100, 200, 200, 1, 1, 1,
            100, 100, 200, 200, -1, -1, 1,
            200, 200, 100, 100, -1, -1, 1,
            200, 200, 100, 100, 1, 1, 1,
            100, 100, 0, 0, 0, 0, 0,
            100, 100, 0, 0, 0, 0, 30,
            100, 100, 0, 0, 0, 0, 31,
            100, 100, 0, 0, 0, 0, 32,
            100, 100, 0, 0, 0, 0, 33,
            100, 100, 0, 0, 0, 0, 34,
            100, 100, 0, 0, 0, 0, 35,
            100, 100, 0, 0, 0, 0, 36,
            100, 100, 0, 0, 0, 0, 37,
            100, 100, 0, 0, 0, 0, 38,
            100, 100, 0, 0, 0, 0, 39,
            100, 100, 0, 0, 0, 0, 40,
            100, 100, 0, 0, 0, 0, 41,
            100, 100, 0, 0, 0, 0, 42,
            100, 100, 0, 0, 0, 0, 43,
            100, 100, 0, 0, 0, 0, 44,
            100, 100, 0, 0, 0, 0, 45,
            100, 100, 0, 0, 0, 0, 46,
            100, 100, 0, 0, 0, 0, 47,
            200, 200, 0, 0, 0, 0, 0,
            200, 200, 0, 0, 0, 0, 30,
            200, 200, 0, 0, 0, 0, 31,
            200, 200, 0, 0, 0, 0, 32,
            200, 200, 0, 0, 0, 0, 33,
            200, 200, 0, 0, 0, 0, 34,
            200, 200, 0, 0, 0, 0, 35,
            200, 200, 0, 0, 0, 0, 36,
            200, 200, 0, 0, 0, 0, 37,
            200, 200, 0, 0, 0, 0, 38,
            200, 200, 0, 0, 0, 0, 39,
            200, 200, 0, 0, 0, 0, 40,
            200, 200, 0, 0, 0, 0, 41,
            200, 200, 0, 0, 0, 0, 42,
            200, 200, 0, 0, 0, 0, 43,
            200, 200, 0, 0, 0, 0, 44,
            200, 200, 0, 0, 0, 0, 45,
            200, 200, 0, 0, 0, 0, 46,
            200, 200, 0, 0, 0, 0, 47
        ]);

        const actualIndexBufferData = new Int16Array([
            0, 1, 3,
            3, 2, 0,
            4, 5, 6,
            4, 6, 7,
            4, 7, 8,
            4, 8, 9,
            4, 9, 10,
            4, 10, 11,
            4, 11, 12,
            4, 12, 13,
            4, 13, 14,
            4, 14, 15,
            4, 15, 16,
            4, 16, 17,
            4, 17, 18,
            4, 18, 19,
            4, 19, 20,
            4, 20, 21,
            4, 21, 22,
            4, 22, 5,
            23, 24, 25,
            23, 25, 26,
            23, 26, 27,
            23, 27, 28,
            23, 28, 29,
            23, 29, 30,
            23, 30, 31,
            23, 31, 32,
            23, 32, 33,
            23, 33, 34,
            23, 34, 35,
            23, 35, 36,
            23, 36, 37,
            23, 37, 38,
            23, 38, 39,
            23, 39, 40,
            23, 40, 41,
            23, 41, 24
        ]);

        expect(mesh.vertexBufferData).toEqual(actualVertexBufferData);
        expect(mesh.indexBufferData).toEqual(actualIndexBufferData);
    });

    it("generate CapsStyle.SQUARE", () =>
    {
        const mesh = WebGLStrokeMeshGenerator.generate([
            [
                100, 100, false,
                200, 200, false
            ]
        ], "square", "bevel");

        const actualVertexBufferData = new Float32Array([
            100, 100, 200, 200, 1, 1, 1,
            100, 100, 200, 200, -1, -1, 1,
            200, 200, 100, 100, -1, -1, 1,
            200, 200, 100, 100, 1, 1, 1,
            100, 100, 200, 200, -1, -1, 10,
            100, 100, 200, 200, 1, 1, 10,
            200, 200, 100, 100, -1, -1, 10,
            200, 200, 100, 100, 1, 1, 10
        ]);

        const actualIndexBufferData = new Int16Array([
            0, 1, 3,
            3, 2, 0,
            0, 4, 5,
            5, 1, 0,
            3, 6, 7,
            7, 2, 3
        ]);

        expect(mesh.vertexBufferData).toEqual(actualVertexBufferData);
        expect(mesh.indexBufferData).toEqual(actualIndexBufferData);
    });

    it("generate JointStyle.BEVEL case 1", () =>
    {
        const mesh = WebGLStrokeMeshGenerator.generate([
            [
                100, 100, false,
                200, 100, false,
                300, 100, false
            ]
        ], "none", "bevel");

        const actualVertexBufferData = new Float32Array([
            100, 100, 200, 100, 1, 1, 1,
            100, 100, 200, 100, -1, -1, 1,
            200, 100, 100, 100, -1, -1, 1,
            200, 100, 100, 100, 1, 1, 1,
            200, 100, 300, 100, 1, 1, 1,
            200, 100, 300, 100, -1, -1, 1,
            300, 100, 200, 100, -1, -1, 1,
            300, 100, 200, 100, 1, 1, 1
        ]);

        const actualIndexBufferData = new Int16Array([
            0, 1, 3,
            3, 2, 0,
            4, 5, 7,
            7, 6, 4
        ]);

        expect(mesh.vertexBufferData).toEqual(actualVertexBufferData);
        expect(mesh.indexBufferData).toEqual(actualIndexBufferData);
    });

    it("generate JointStyle.BEVEL case 2", () =>
    {
        const mesh = WebGLStrokeMeshGenerator.generate([
            [
                100, 100, false,
                200, 100, false,
                100, 100, false
            ]
        ], "none", "bevel");

        const actualVertexBufferData = new Float32Array([
            100, 100, 200, 100, 1, 1, 1,
            100, 100, 200, 100, -1, -1, 1,
            200, 100, 100, 100, -1, -1, 1,
            200, 100, 100, 100, 1, 1, 1,
            200, 100, 100, 100, 1, 1, 1,
            200, 100, 100, 100, -1, -1, 1,
            100, 100, 200, 100, -1, -1, 1,
            100, 100, 200, 100, 1, 1, 1,
            100, 100, 0, 0, 0, 0, 0
        ]);

        const actualIndexBufferData = new Int16Array([
            0, 1, 3,
            3, 2, 0,
            4, 5, 7,
            7, 6, 4,
            8, 1, 7,
            8, 0, 0
        ]);

        expect(mesh.vertexBufferData).toEqual(actualVertexBufferData);
        expect(mesh.indexBufferData).toEqual(actualIndexBufferData);
    });

    it("generate JointStyle.BEVEL case 3", () =>
    {
        const mesh = WebGLStrokeMeshGenerator.generate([
            [
                100, 100, false,
                200, 200, false,
                300, 100, false
            ]
        ], "none", "bevel");

        const actualVertexBufferData = new Float32Array([
            100, 100, 200, 200, 1, 1, 1,
            100, 100, 200, 200, -1, -1, 1,
            200, 200, 100, 100, -1, -1, 1,
            200, 200, 100, 100, 1, 1, 1,
            200, 200, 300, 100, 1, 1, 1,
            200, 200, 300, 100, -1, -1, 1,
            300, 100, 200, 200, -1, -1, 1,
            300, 100, 200, 200, 1, 1, 1,
            200, 200, 0, 0, 0, 0, 0
        ]);

        const actualIndexBufferData = new Int16Array([
            0, 1, 3,
            3, 2, 0,
            4, 5, 7,
            7, 6, 4,
            8, 4, 2,
            8, 3, 5
        ]);

        expect(mesh.vertexBufferData).toEqual(actualVertexBufferData);
        expect(mesh.indexBufferData).toEqual(actualIndexBufferData);
    });

    it("generate JointStyle.ROUND case 1", () =>
    {
        const mesh = WebGLStrokeMeshGenerator.generate([
            [
                100, 100, false,
                200, 100, false,
                300, 100, false
            ]
        ], "none", "round");

        const actualVertexBufferData = new Float32Array([
            100, 100, 200, 100, 1, 1, 1,
            100, 100, 200, 100, -1, -1, 1,
            200, 100, 100, 100, -1, -1, 1,
            200, 100, 100, 100, 1, 1, 1,
            200, 100, 300, 100, 1, 1, 1,
            200, 100, 300, 100, -1, -1, 1,
            300, 100, 200, 100, -1, -1, 1,
            300, 100, 200, 100, 1, 1, 1
        ]);

        const actualIndexBufferData = new Int16Array([
            0, 1, 3,
            3, 2, 0,
            4, 5, 7,
            7, 6, 4
        ]);

        expect(mesh.vertexBufferData).toEqual(actualVertexBufferData);
        expect(mesh.indexBufferData).toEqual(actualIndexBufferData);
    });

    it("generate JointStyle.ROUND case 2", () =>
    {
        const mesh = WebGLStrokeMeshGenerator.generate([
            [
                100, 100, false,
                200, 100, false,
                100, 100, false
            ]
        ], "none", "round");

        const actualVertexBufferData = new Float32Array([
            100, 100, 200, 100, 1, 1, 1,
            100, 100, 200, 100, -1, -1, 1,
            200, 100, 100, 100, -1, -1, 1,
            200, 100, 100, 100, 1, 1, 1,
            200, 100, 100, 100, 1, 1, 1,
            200, 100, 100, 100, -1, -1, 1,
            100, 100, 200, 100, -1, -1, 1,
            100, 100, 200, 100, 1, 1, 1,
            100, 100, 0, 0, 0, 0, 0,
            100, 100, 0, 0, 0, 0, 30,
            100, 100, 0, 0, 0, 0, 31,
            100, 100, 0, 0, 0, 0, 32,
            100, 100, 0, 0, 0, 0, 33,
            100, 100, 0, 0, 0, 0, 34,
            100, 100, 0, 0, 0, 0, 35,
            100, 100, 0, 0, 0, 0, 36,
            100, 100, 0, 0, 0, 0, 37,
            100, 100, 0, 0, 0, 0, 38,
            100, 100, 0, 0, 0, 0, 39,
            100, 100, 0, 0, 0, 0, 40,
            100, 100, 0, 0, 0, 0, 41,
            100, 100, 0, 0, 0, 0, 42,
            100, 100, 0, 0, 0, 0, 43,
            100, 100, 0, 0, 0, 0, 44,
            100, 100, 0, 0, 0, 0, 45,
            100, 100, 0, 0, 0, 0, 46,
            100, 100, 0, 0, 0, 0, 47
        ]);

        const actualIndexBufferData = new Int16Array([
            0, 1, 3,
            3, 2, 0,
            4, 5, 7,
            7, 6, 4,
            8, 9, 10,
            8, 10, 11,
            8, 11, 12,
            8, 12, 13,
            8, 13, 14,
            8, 14, 15,
            8, 15, 16,
            8, 16, 17,
            8, 17, 18,
            8, 18, 19,
            8, 19, 20,
            8, 20, 21,
            8, 21, 22,
            8, 22, 23,
            8, 23, 24,
            8, 24, 25,
            8, 25, 26,
            8, 26, 9
        ]);

        expect(mesh.vertexBufferData).toEqual(actualVertexBufferData);
        expect(mesh.indexBufferData).toEqual(actualIndexBufferData);
    });

    it("generate JointStyle.ROUND case 3", () =>
    {
        const mesh = WebGLStrokeMeshGenerator.generate([
            [
                100, 100, false,
                200, 200, false,
                300, 100, false
            ]
        ], "none", "round");

        const actualVertexBufferData = new Float32Array([
            100, 100, 200, 200, 1, 1, 1,
            100, 100, 200, 200, -1, -1, 1,
            200, 200, 100, 100, -1, -1, 1,
            200, 200, 100, 100, 1, 1, 1,
            200, 200, 300, 100, 1, 1, 1,
            200, 200, 300, 100, -1, -1, 1,
            300, 100, 200, 200, -1, -1, 1,
            300, 100, 200, 200, 1, 1, 1,
            200, 200, 0, 0, 0, 0, 0,
            200, 200, 0, 0, 0, 0, 30,
            200, 200, 0, 0, 0, 0, 31,
            200, 200, 0, 0, 0, 0, 32,
            200, 200, 0, 0, 0, 0, 33,
            200, 200, 0, 0, 0, 0, 34,
            200, 200, 0, 0, 0, 0, 35,
            200, 200, 0, 0, 0, 0, 36,
            200, 200, 0, 0, 0, 0, 37,
            200, 200, 0, 0, 0, 0, 38,
            200, 200, 0, 0, 0, 0, 39,
            200, 200, 0, 0, 0, 0, 40,
            200, 200, 0, 0, 0, 0, 41,
            200, 200, 0, 0, 0, 0, 42,
            200, 200, 0, 0, 0, 0, 43,
            200, 200, 0, 0, 0, 0, 44,
            200, 200, 0, 0, 0, 0, 45,
            200, 200, 0, 0, 0, 0, 46,
            200, 200, 0, 0, 0, 0, 47
        ]);

        const actualIndexBufferData = new Int16Array([
            0, 1, 3,
            3, 2, 0,
            4, 5, 7,
            7, 6, 4,
            8, 9, 10,
            8, 10, 11,
            8, 11, 12,
            8, 12, 13,
            8, 13, 14,
            8, 14, 15,
            8, 15, 16,
            8, 16, 17,
            8, 17, 18,
            8, 18, 19,
            8, 19, 20,
            8, 20, 21,
            8, 21, 22,
            8, 22, 23,
            8, 23, 24,
            8, 24, 25,
            8, 25, 26,
            8, 26, 9
        ]);

        expect(mesh.vertexBufferData).toEqual(actualVertexBufferData);
        expect(mesh.indexBufferData).toEqual(actualIndexBufferData);
    });

    it("generate JointStyle.MITER case 1", () =>
    {
        const mesh = WebGLStrokeMeshGenerator.generate([
            [
                100, 100, false,
                200, 100, false,
                300, 100, false
            ]
        ], "none", "miter");

        const actualVertexBufferData = new Float32Array([
            100, 100, 200, 100, 1, 1, 1,
            100, 100, 200, 100, -1, -1, 1,
            200, 100, 100, 100, -1, -1, 1,
            200, 100, 100, 100, 1, 1, 1,
            200, 100, 300, 100, 1, 1, 1,
            200, 100, 300, 100, -1, -1, 1,
            300, 100, 200, 100, -1, -1, 1,
            300, 100, 200, 100, 1, 1, 1
        ]);

        const actualIndexBufferData = new Int16Array([
            0, 1, 3,
            3, 2, 0,
            4, 5, 7,
            7, 6, 4
        ]);

        expect(mesh.vertexBufferData).toEqual(actualVertexBufferData);
        expect(mesh.indexBufferData).toEqual(actualIndexBufferData);
    });

    it("generate JointStyle.MITER case 2", () =>
    {
        const mesh = WebGLStrokeMeshGenerator.generate([
            [
                100, 100, false,
                200, 100, false,
                100, 100, false
            ]
        ], "none", "miter");

        const actualVertexBufferData = new Float32Array([
            100, 100, 200, 100, 1, 1, 1,
            100, 100, 200, 100, -1, -1, 1,
            200, 100, 100, 100, -1, -1, 1,
            200, 100, 100, 100, 1, 1, 1,
            200, 100, 100, 100, 1, 1, 1,
            200, 100, 100, 100, -1, -1, 1,
            100, 100, 200, 100, -1, -1, 1,
            100, 100, 200, 100, 1, 1, 1,
            100, 100, 200, 100, 100, 6, 0,
            100, 100, 200, 100, 100, 6, 21,
            100, 100, 200, 100, 100, 6, 22,
            100, 100, 200, 100, 100, 6, 23,
            100, 100, 200, 100, 100, 6, 24
        ]);

        const actualIndexBufferData = new Int16Array([
            0, 1, 3,
            3, 2, 0,
            4, 5, 7,
            7, 6, 4,
            8, 1, 9,
            8, 9, 10,
            8, 10, 7,
            8, 0, 11,
            8, 11, 12,
            8, 12, 0
        ]);

        expect(mesh.vertexBufferData).toEqual(actualVertexBufferData);
        expect(mesh.indexBufferData).toEqual(actualIndexBufferData);
    });

    it("generate JointStyle.MITER case 3", () =>
    {
        const mesh = WebGLStrokeMeshGenerator.generate([
            [
                100, 100, false,
                200, 200, false,
                300, 100, false
            ]
        ], "none", "miter");

        const actualVertexBufferData = new Float32Array([
            100, 100, 200, 200, 1, 1, 1,
            100, 100, 200, 200, -1, -1, 1,
            200, 200, 100, 100, -1, -1, 1,
            200, 200, 100, 100, 1, 1, 1,
            200, 200, 300, 100, 1, 1, 1,
            200, 200, 300, 100, -1, -1, 1,
            300, 100, 200, 200, -1, -1, 1,
            300, 100, 200, 200, 1, 1, 1,
            200, 200, 100, 100, 300, 100, 0,
            200, 200, 100, 100, 300, 100, 21,
            200, 200, 100, 100, 300, 100, 22,
            200, 200, 100, 100, 300, 100, 23,
            200, 200, 100, 100, 300, 100, 24
        ]);

        const actualIndexBufferData = new Int16Array([
            0, 1, 3,
            3, 2, 0,
            4, 5, 7,
            7, 6, 4,
            8, 4, 9,
            8, 9, 10,
            8, 10, 2,
            8, 3, 11,
            8, 11, 12,
            8, 12, 5
        ]);

        expect(mesh.vertexBufferData).toEqual(actualVertexBufferData);
        expect(mesh.indexBufferData).toEqual(actualIndexBufferData);
    });

    // ベジェ曲線
    it("generate quadratic curve", () =>
    {
        const mesh = WebGLStrokeMeshGenerator.generate([
            [
                100, 100, false,
                200, 100, true,
                200, 200, false
            ]
        ], "none", "bevel");

        const actualVertexBufferData = new Float32Array([
            100, 100, 117.3553695678711, 100.82644653320312, 1, 1, 1,
            100, 100, 117.3553695678711, 100.82644653320312, -1, -1, 1,
            117.3553695678711, 100.82644653320312, 100, 100, -1, -1, 2,
            117.3553695678711, 100.82644653320312, 100, 100, 1, 1, 2,
            117.3553695678711, 100.82644653320312, 133.05784606933594, 103.3057861328125, 1, 1, 1,
            117.3553695678711, 100.82644653320312, 133.05784606933594, 103.3057861328125, -1, -1, 1,
            133.05784606933594, 103.3057861328125, 117.3553695678711, 100.82644653320312, -1, -1, 2,
            133.05784606933594, 103.3057861328125, 117.3553695678711, 100.82644653320312, 1, 1, 2,
            133.05784606933594, 103.3057861328125, 147.10743713378906, 107.43801879882812, 1, 1, 1,
            133.05784606933594, 103.3057861328125, 147.10743713378906, 107.43801879882812, -1, -1, 1,
            147.10743713378906, 107.43801879882812, 133.05784606933594, 103.3057861328125, -1, -1, 2,
            147.10743713378906, 107.43801879882812, 133.05784606933594, 103.3057861328125, 1, 1, 2,
            147.10743713378906, 107.43801879882812, 159.50413513183594, 113.22313690185547, 1, 1, 1,
            147.10743713378906, 107.43801879882812, 159.50413513183594, 113.22313690185547, -1, -1, 1,
            159.50413513183594, 113.22313690185547, 147.10743713378906, 107.43801879882812, -1, -1, 2,
            159.50413513183594, 113.22313690185547, 147.10743713378906, 107.43801879882812, 1, 1, 2,
            159.50413513183594, 113.22313690185547, 170.24794006347656, 120.6611557006836, 1, 1, 1,
            159.50413513183594, 113.22313690185547, 170.24794006347656, 120.6611557006836, -1, -1, 1,
            170.24794006347656, 120.6611557006836, 159.50413513183594, 113.22313690185547, -1, -1, 2,
            170.24794006347656, 120.6611557006836, 159.50413513183594, 113.22313690185547, 1, 1, 2,
            170.24794006347656, 120.6611557006836, 179.33883666992188, 129.75205993652344, 1, 1, 1,
            170.24794006347656, 120.6611557006836, 179.33883666992188, 129.75205993652344, -1, -1, 1,
            179.33883666992188, 129.75205993652344, 170.24794006347656, 120.6611557006836, -1, -1, 2,
            179.33883666992188, 129.75205993652344, 170.24794006347656, 120.6611557006836, 1, 1, 2,
            179.33883666992188, 129.75205993652344, 186.77685546875, 140.49586486816406, 1, 1, 1,
            179.33883666992188, 129.75205993652344, 186.77685546875, 140.49586486816406, -1, -1, 1,
            186.77685546875, 140.49586486816406, 179.33883666992188, 129.75205993652344, -1, -1, 2,
            186.77685546875, 140.49586486816406, 179.33883666992188, 129.75205993652344, 1, 1, 2,
            186.77685546875, 140.49586486816406, 192.56198120117188, 152.89256286621094, 1, 1, 1,
            186.77685546875, 140.49586486816406, 192.56198120117188, 152.89256286621094, -1, -1, 1,
            192.56198120117188, 152.89256286621094, 186.77685546875, 140.49586486816406, -1, -1, 2,
            192.56198120117188, 152.89256286621094, 186.77685546875, 140.49586486816406, 1, 1, 2,
            192.56198120117188, 152.89256286621094, 196.6942138671875, 166.94215393066406, 1, 1, 1,
            192.56198120117188, 152.89256286621094, 196.6942138671875, 166.94215393066406, -1, -1, 1,
            196.6942138671875, 166.94215393066406, 192.56198120117188, 152.89256286621094, -1, -1, 2,
            196.6942138671875, 166.94215393066406, 192.56198120117188, 152.89256286621094, 1, 1, 2,
            196.6942138671875, 166.94215393066406, 199.17355346679688, 182.64462280273438, 1, 1, 1,
            196.6942138671875, 166.94215393066406, 199.17355346679688, 182.64462280273438, -1, -1, 1,
            199.17355346679688, 182.64462280273438, 196.6942138671875, 166.94215393066406, -1, -1, 2,
            199.17355346679688, 182.64462280273438, 196.6942138671875, 166.94215393066406, 1, 1, 2,
            199.17355346679688, 182.64462280273438, 200, 200, 1, 1, 1,
            199.17355346679688, 182.64462280273438, 200, 200, -1, -1, 1,
            200, 200, 199.17355346679688, 182.64462280273438, -1, -1, 1,
            200, 200, 199.17355346679688, 182.64462280273438, 1, 1, 1,
            117.3553695678711, 100.82644653320312, 0, 0, 0, 0, 0,
            133.05784606933594, 103.3057861328125, 0, 0, 0, 0, 0,
            147.10743713378906, 107.43801879882812, 0, 0, 0, 0, 0,
            159.50413513183594, 113.22313690185547, 0, 0, 0, 0, 0,
            170.24794006347656, 120.6611557006836, 0, 0, 0, 0, 0,
            179.33883666992188, 129.75205993652344, 0, 0, 0, 0, 0,
            186.77685546875, 140.49586486816406, 0, 0, 0, 0, 0,
            192.56198120117188, 152.89256286621094, 0, 0, 0, 0, 0,
            196.6942138671875, 166.94215393066406, 0, 0, 0, 0, 0,
            199.17355346679688, 182.64462280273438, 0, 0, 0, 0, 0
        ]);

        const actualIndexBufferData = new Int16Array([
            0, 1, 3,
            3, 2, 0,
            4, 5, 7,
            7, 6, 4,
            8, 9, 11,
            11, 10, 8,
            12, 13, 15,
            15, 14, 12,
            16, 17, 19,
            19, 18, 16,
            20, 21, 23,
            23, 22, 20,
            24, 25, 27,
            27, 26, 24,
            28, 29, 31,
            31, 30, 28,
            32, 33, 35,
            35, 34, 32,
            36, 37, 39,
            39, 38, 36,
            40, 41, 43,
            43, 42, 40,
            44, 4, 2,
            44, 3, 5,
            45, 8, 6,
            45, 7, 9,
            46, 12, 10,
            46, 11, 13,
            47, 16, 14,
            47, 15, 17,
            48, 20, 18,
            48, 19, 21,
            49, 24, 22,
            49, 23, 25,
            50, 28, 26,
            50, 27, 29,
            51, 32, 30,
            51, 31, 33,
            52, 36, 34,
            52, 35, 37,
            53, 40, 38,
            53, 39, 41
        ]);

        expect(mesh.vertexBufferData).toEqual(actualVertexBufferData);
        expect(mesh.indexBufferData).toEqual(actualIndexBufferData);
    });

    it("generate 2 mesh", () =>
    {
        const mesh = WebGLStrokeMeshGenerator.generate([
            [
                100, 100, false,
                200, 200, false
            ],
            [
                200, 100, false,
                100, 200, false
            ]
        ], "none", "bevel");

        const actualVertexBufferData = new Float32Array([
            100, 100, 200, 200, 1, 1, 1,
            100, 100, 200, 200, -1, -1, 1,
            200, 200, 100, 100, -1, -1, 1,
            200, 200, 100, 100, 1, 1, 1,
            200, 100, 100, 200, 1, 1, 1,
            200, 100, 100, 200, -1, -1, 1,
            100, 200, 200, 100, -1, -1, 1,
            100, 200, 200, 100, 1, 1, 1
        ]);

        const actualIndexBufferData = new Int16Array([
            0, 1, 3,
            3, 2, 0,
            4, 5, 7,
            7, 6, 4
        ]);

        expect(mesh.vertexBufferData).toEqual(actualVertexBufferData);
        expect(mesh.indexBufferData).toEqual(actualIndexBufferData);
    });

});
